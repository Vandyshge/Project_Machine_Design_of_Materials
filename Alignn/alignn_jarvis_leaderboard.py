# -*- coding: utf-8 -*-
"""alignn_jarvis_leaderboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/knc6/jarvis-tools-notebooks/blob/master/jarvis-tools-notebooks/alignn_jarvis_leaderboard.ipynb

## This notebook shows how to add benchmarks to [JARVIS-Leaderboard](https://pages.nist.gov/jarvis_leaderboard/) using [alignn](https://github.com/usnistgov/alignn) for [exfoliation_energy](https://pages.nist.gov/jarvis_leaderboard/AI/SinglePropertyPrediction/dft_3d_exfoliation_energy/) task.

The Atomistic Line Graph Neural Network (https://www.nature.com/articles/s41524-021-00650-1) introduces a new graph convolution layer that explicitly models both two and three body interactions in atomistic systems.

This is achieved by composing two edge-gated graph convolution layers, the first applied to the atomistic line graph L(g) (representing triplet interactions) and the second applied to the atomistic bond graph g (representing pair interactions).

The atomistic graph g consists of a node for each atom i (with atom/node representations hi), and one edge for each atom pair within a cutoff radius (with bond/pair representations eij).

The atomistic line graph L(g) represents relationships between atom triplets: it has nodes corresponding to bonds (sharing representations eij with those in g) and edges corresponding to bond angles (with angle/triplet representations tijk).

The line graph convolution updates the triplet representations and the pair representations; the direct graph convolution further updates the pair representations and the atom representations.

This model is used for developing unified graph neural force-fields as well (https://pubs.rsc.org/en/content/articlehtml/2023/dd/d2dd00096b).

First, let's install alignn
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# import os
# !pip install uv
# !uv venv .venv --python 3.10
# !source .venv/bin/activate
# !pip install -q alignn
# !pip uninstall dgl -y
# !uv pip install -q --no-cache-dir dgl -f https://data.dgl.ai/wheels/torch-2.2/cu121/repo.html
# # !git clone https://github.com/usnistgov/alignn.git
# # os.chdir("alignn")
# # !git checkout redw
# # !uv pip install -q -e .
#

# !pip install -q condacolab
# import condacolab
# condacolab.install()

# import condacolab
# condacolab.check()

# # %%time
# # !pip install -q dgl==1.0.1+cu117 -f https://data.dgl.ai/wheels/cu117/repo.html
# # !pip install -q alignn
# %%time
# !conda install alignn dgl=2.1.0 pytorch torchvision torchaudio pytorch-cuda -c pytorch -c nvidia -y --quiet

"""Let's run examples given in  ALIGNN to check installations"""

import os
!pwd
os.chdir('/content')
# Clone ALIGNN repo to get example folder
if not os.path.exists('alignn'):
  !git clone https://github.com/usnistgov/alignn.git

os.chdir('alignn')

#Regression
!rm -rf *data
!train_alignn.py --root_dir "alignn/examples/sample_data" --config "alignn/examples/sample_data/config_example.json" --output_dir=temp

# Classification
!rm -rf *data
!train_alignn.py --root_dir "alignn/examples/sample_data" --classification_threshold 0.01 --config "alignn/examples/sample_data/config_example.json" --output_dir=temp

# Multi-output model example
!rm -rf *data
!train_alignn.py --root_dir "alignn/examples/sample_data_multi_prop" --config "alignn/examples/sample_data/config_example.json" --output_dir=temp

# Force field training
!rm -rf *data
!train_alignn.py --root_dir "alignn/examples/sample_data_ff" --config "alignn/examples/sample_data_ff/config_example_atomwise.json" --output_dir="temp"





"""Now, let's install jarvis_leaderboard"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# pip install -q jarvis_leaderboard

"""Check if you can import libraries"""

import jarvis_leaderboard

import alignn

"""Let's populate a dataset (AI-SinglePropertyPrediction-exfoliation_energy-dft_3d-test-mae). Files will be saved in the output_path i.e. 'Out' directory"""

!jarvis_populate_data.py --benchmark_file AI-SinglePropertyPrediction-exfoliation_energy-dft_3d-test-mae --output_path=Out

!ls Out

ls Out/dataset_info.json

from jarvis.db.jsonutils import loadjson
dataset_info = loadjson('Out/dataset_info.json')

dataset_info

n_train = dataset_info['n_train']
n_val = dataset_info['n_val']
n_test = dataset_info['n_test']

"""Download an example config file."""

!wget https://raw.githubusercontent.com/usnistgov/alignn/main/alignn/examples/sample_data/config_example.json

from jarvis.db.jsonutils import loadjson
config = loadjson('config_example.json')

config

config['n_train'] = n_train
config['n_val'] = n_val
config['n_test'] = n_test
config['epochs'] = 20 #Increase more if necessary
config['batch_size'] = 10 #Increase more if necessary

# Feel free to change epochs/lr/hyperparameters etc.
# and see its effect on performance, e.g.
# config['model']['alignn_layers'] = 2

from jarvis.db.jsonutils import dumpjson
dumpjson(data=config,filename='tmp_config.json')

# Commented out IPython magic to ensure Python compatibility.
# %%time
# !rm -rf *data temp
# !train_alignn.py --root_dir "Out" --config "tmp_config.json" --output_dir="temp"

"""Keep a note on the environment"""

!conda env export

"""Plot performance on test set"""

from jarvis.db.jsonutils import loadjson
import pandas as pd
d=loadjson('temp/Test_results.json')
x=[i['target_out'][0] for i in d]
y=[i['pred_out'] for i in d]
ids=[i['id'] for i in d]

# Create a DataFrame
data = {'id': ids, 'target': x, 'prediction': y}
df = pd.DataFrame(data)

# Save the DataFrame as a CSV file
csv_file = 'temp/prediction_results_test_set.csv'
df.to_csv(csv_file, index=False)

plt.plot(x,y,'.')
plt.plot(x,x)
plt.xlabel('DFT')
plt.ylabel('ALIGNN')

from sklearn.metrics import mean_absolute_error
print('MAE',mean_absolute_error(x,y))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
# temp was the output directory we specified
df = pd.read_csv('temp/prediction_results_test_set.csv')

df

plt.plot(df['target'],df['prediction'],'.')
plt.plot(df['target'],df['target'])
plt.xlabel('DFT Exfo. energy (meV)')
plt.ylabel('AI Exfo. energy (meV)')

from sklearn.metrics import mean_absolute_error
mean_absolute_error(df['target'],df['prediction'])

"""We choose one of the SinglePropertyPrediction tasks from the [leaderboard](https://pages.nist.gov/jarvis_leaderboard/AI/SinglePropertyPrediction/). See other examples in the [alignn_model](https://github.com/usnistgov/jarvis_leaderboard/tree/main/jarvis_leaderboard/benchmarks/alignn_model) benchmark folder

Prepare the csv file with six components in the filename.

Give a different name for the folder say alignn_test_XYZ
"""

import os
cwd=os.getcwd()
os.makedirs('alignn_test')
os.chdir('alignn_test')

!cp ../temp/prediction_results_test_set.csv ./AI-SinglePropertyPrediction-exfoliation_energy-dft_3d-test-mae.csv

!zip AI-SinglePropertyPrediction-exfoliation_energy-dft_3d-test-mae.csv.zip AI-SinglePropertyPrediction-exfoliation_energy-dft_3d-test-mae.csv

"""Get sample metadata"""

!wget https://raw.githubusercontent.com/usnistgov/jarvis_leaderboard/main/jarvis_leaderboard/contributions/alignn_model/metadata.json

!rm AI-SinglePropertyPrediction-exfoliation_energy-dft_3d-test-mae.csv

!ls

from jarvis.db.jsonutils import loadjson,dumpjson
meta = loadjson('metadata.json')

meta

"""Feel free to edit the file and keep the info for benchmarks you contributed"""

meta['model_name'] = 'alignn_test'

# TODO: Add other details
dumpjson(data=meta,filename='metadata.json')

!wget https://raw.githubusercontent.com/usnistgov/jarvis_leaderboard/main/jarvis_leaderboard/contributions/alignn_model/run.sh

os.chdir(cwd)

"""Add github username"""

username = "knc6"
email = "abc@gmail.com"
passwd = #"ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"


!git config --global credential.helper cache
!git config --global credential.helper 'cache --timeout=3600'
!git config --global user.name {username}
!git config --global user.email {email}
!git config --global user.password {passwd}



"""1. Replace knc6 by your own GitHub username.
2. You might have to add your [GitHub password/token](https://github.com/settings/tokens) twice at the command prompt after you run the following command.
3. This will create a new pull request at the parent repo: https://github.com/usnistgov/jarvis_leaderboard/pulls
4. After an admin approves the contribution, the benchmark will be added to the main website.

"""

!jarvis_upload.py --your_benchmark_directory  alignn_test

"""The above script automatically:

   a) forks the jarvis_leaderboard repo from `https://github.com/usnistgov/jarvis_leaderboard` to your GitHub account,

   b) clones the forked jarvis_leaderboard from GitHub,  

   c) copies the `test_bench` folder in the `jarvis_leaderboard/benchmarks` folder,

   d) check if adding your benchmarks breaks the workflow using `rebuild.py` script,

   e) `git add`, `git commit`, and `git push` to the forked repo,

   f) create a pull request to the main usnistgov repo,

   g) an admin will approve the benchmark and new pages will be created.

Please be mindful not to upload too many unnecessary benchmarks. You can learn about the ethics of software development here: https://github.com/usnistgov/jarvis/blob/master/CODE_OF_CONDUCT.md

Learn more about NIST-License here: https://github.com/usnistgov/jarvis/blob/master/LICENSE.rst
"""

pip freeze

